{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"open",
				"open_bracket"
			],
			[
				"mem",
				"memory_arena"
			],
			[
				"token",
				"tokenizer"
			],
			[
				"Token",
				"Token_Star"
			],
			[
				"Meta",
				"MetaInfoCount"
			],
			[
				"Json",
				"JsonData"
			],
			[
				"json",
				"json_data"
			],
			[
				"StringToi",
				"StringToInt32"
			],
			[
				"Get",
				"GetInt32"
			],
			[
				"MetaIn",
				"MetaInfoCount"
			],
			[
				"Struct",
				"StructToString"
			],
			[
				"meta",
				"meta_member"
			],
			[
				"struct",
				"struct_string_return"
			],
			[
				"update",
				"updateRequest"
			],
			[
				"GetA",
				"GetAsTextUnsafe"
			],
			[
				"respon",
				"responseData"
			],
			[
				"THir",
				"ThirdPartyLauncher"
			],
			[
				"Universe",
				"UniverseCamPos"
			],
			[
				"skll",
				"skill_node"
			],
			[
				"journey_step",
				"journey_step_type"
			],
			[
				"Missin",
				"MissingMSStart"
			],
			[
				"ve",
				"vector2"
			],
			[
				"coast",
				"CoastDurationSeconds"
			],
			[
				"Global",
				"GlobalTransMem"
			],
			[
				"has",
				"hasFlag"
			],
			[
				"show",
				"showState"
			],
			[
				"DistTo",
				"DistToStart"
			],
			[
				"Cached",
				"CachedDirToTargetForce"
			],
			[
				"Current",
				"CurrentShip"
			],
			[
				"Mass",
				"MassCurrent"
			],
			[
				"item_hol",
				"item_hold_filter"
			],
			[
				"Inputs",
				"InputsMissing"
			],
			[
				"Ediot",
				"EditorState"
			],
			[
				"Editor",
				"EditorState"
			],
			[
				"Items",
				"ItemsMissingCount"
			],
			[
				"Curr",
				"CurrentStation"
			],
			[
				"Cur",
				"CurrentStation"
			],
			[
				"COnver",
				"ConverterUpdate"
			],
			[
				"Durati",
				"DurationMS"
			],
			[
				"output",
				"OutputsCount"
			],
			[
				"Output",
				"OutputsCount"
			],
			[
				"Hovering",
				"HoveringItemWindow"
			],
			[
				"Hover",
				"HoveringItemWindow"
			],
			[
				"HO",
				"HoldItemDraggingFrom"
			],
			[
				"Hold",
				"HoldItemDraggingFrom"
			],
			[
				"Update",
				"UpdateMass"
			],
			[
				"Chang",
				"ChangedFlagCount"
			],
			[
				"Con",
				"Consumers"
			],
			[
				"nam",
				"nameLabel"
			],
			[
				"Exper",
				"ExperienceType"
			],
			[
				"FeaturedC",
				"FeaturedCardLaunchType"
			],
			[
				"worl",
				"worldscapeThumbnail"
			],
			[
				"exper",
				"experienceDisplayName"
			],
			[
				"ExperieneType",
				"ExperienceTypeInformation"
			],
			[
				"Clear",
				"ClearPreviousData"
			],
			[
				"Expre",
				"ExperienceTypeInformation"
			],
			[
				"cur",
				"currentWorldSpaces"
			],
			[
				"ship_modul",
				"ship_module_id"
			],
			[
				"ship_module_",
				"ship_module_slot_type"
			],
			[
				"ship_modu",
				"ship_module_type"
			],
			[
				"Item",
				"ItemDragging"
			],
			[
				"Self",
				"SelfStation"
			],
			[
				"Platfor",
				"PlatformApi"
			],
			[
				"Keyo",
				"KeyboardInput"
			],
			[
				"Keyboar",
				"KeyboardState"
			],
			[
				"event",
				"eventType"
			],
			[
				"MouseLe",
				"MouseLeftState"
			],
			[
				"MouseL",
				"MouseLeftState"
			],
			[
				"MouseRi",
				"MouseRightState"
			],
			[
				"even",
				"eventType"
			],
			[
				"Tar",
				"TargetFrameSec"
			],
			[
				"Next",
				"NextPath"
			],
			[
				"PathList",
				"PathListCount"
			],
			[
				"Path",
				"PathList"
			],
			[
				"FileType",
				"FileTypeDesired"
			],
			[
				"Fieltype",
				"FileTypeChar"
			],
			[
				"GetWall",
				"GetWallClockGame"
			],
			[
				"Mem",
				"Memory"
			],
			[
				"File",
				"FileName"
			],
			[
				"Loa",
				"LoadFileData"
			],
			[
				"Contents",
				"ContentsSize"
			],
			[
				"Data",
				"DataInside"
			],
			[
				"file",
				"fileReplacements"
			],
			[
				"teach",
				"teachingExpression"
			],
			[
				"Misison",
				"MissionDefinitions"
			],
			[
				"MisisonDe",
				"MissionDefinitionsCount"
			],
			[
				"Depende",
				"DependencyIDs"
			],
			[
				"Depend",
				"DependenciesCount"
			],
			[
				"mission",
				"mission_definition"
			],
			[
				"position",
				"position_x"
			],
			[
				"card",
				"cardHovered"
			],
			[
				"new",
				"newCard"
			],
			[
				"M",
				"MainMenuFeaturedCard"
			],
			[
				"pages",
				"pagesCount"
			],
			[
				"Fourh",
				"FourthMission"
			],
			[
				"Third",
				"ThirdMission"
			],
			[
				"WOrld",
				"WorldPos"
			],
			[
				"v",
				"vector3"
			],
			[
				"Sc",
				"ScreenPos"
			],
			[
				"Actie",
				"ActiveCam"
			],
			[
				"id",
				"IDSelected"
			],
			[
				"ID",
				"IDSelected"
			],
			[
				"Active",
				"ActiveCam"
			],
			[
				"Mission",
				"MissionSelected"
			],
			[
				"MIssion",
				"MissionWindowOpen"
			],
			[
				"earen",
				"earnedInventory"
			],
			[
				"ear",
				"earnedInventory"
			],
			[
				"resour",
				"resorucesPath"
			],
			[
				"inven",
				"inventoryMode"
			],
			[
				"progressionstep",
				"progressionStepKey"
			],
			[
				"prog",
				"progressionController"
			],
			[
				"Load",
				"LoadMainMenu"
			],
			[
				"notifi",
				"notification"
			],
			[
				"Battl",
				"BattleMonster"
			],
			[
				"rea",
				"real32"
			],
			[
				"RandomR",
				"RandomRangeInt"
			],
			[
				"TIme",
				"TimeSeconds"
			],
			[
				"Bounc",
				"BouncerPos"
			],
			[
				"Game",
				"GameNull"
			],
			[
				"message",
				"messageDefaultString"
			],
			[
				"mess",
				"messageDisplay"
			],
			[
				"title",
				"titleString"
			],
			[
				"maincan",
				"mainCanvasCollider"
			],
			[
				"main",
				"mainCanvas"
			],
			[
				"Target",
				"TargetValid"
			],
			[
				"Rest",
				"ResetBullets"
			],
			[
				"Trans",
				"TransitionToNewExperience"
			],
			[
				"Set",
				"SetActive"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Game/code/Engine/SaveData.cpp",
			"settings":
			{
				"buffer_size": 7194,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Game/code/Engine/SaveData.h",
			"settings":
			{
				"buffer_size": 372,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Game/code/Engine/EngineCore.h",
			"settings":
			{
				"buffer_size": 13914,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Game/code/Game/Game.h",
			"settings":
			{
				"buffer_size": 9322,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Game/code/Game/Game.cpp",
			"settings":
			{
				"buffer_size": 35281,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Game/code/Game/Item.cpp",
			"settings":
			{
				"buffer_size": 5610,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#pragma once\n#ifndef ENGINE_CORE\n#define ENGINE_CORE\n\n#include \"EngineCore.h\"\n\nrender::api RenderApi;\n\n#include \"imgui/imgui.h\"\n#include \"imgui/imgui.cpp\"\n#include \"imgui/imgui_internal.h\"\n#include \"imgui/imconfig.h\"\n#include \"imgui/imstb_rectpack.h\"\n#include \"imgui/imstb_textedit.h\"\n#include \"imgui/imstb_truetype.h\"\n#include \"imgui/imgui_demo.cpp\"\n#include \"imgui/imgui_draw.cpp\"\n#include \"imgui/imgui_widgets.cpp\"\n\n#include \"Rect.cpp\"\n\n// This should be used with the generated system to guarantee safety\nint32 StringToEnum(string Input, string* NamesArray, int32 EnumsCount)\n{\n\tfor (int i = 0; i < EnumsCount; i++) {\n\t\tif (NamesArray[i] == Input) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\tConsoleLog(\"Could not convert string to enum\");\n\tConsoleLog(Input.Array());\n\n\treturn 0;\n}\n\nvector2 NearestOnLine(line Line, vector2 Point)\n{\n\tvector2 LineDir = Vector2Normalize(Line.Start - Line.End);\n\tvector2 LinePerp = Vector2Perp(LineDir);\n\n\t// Find intersection between mouse line and axis line. Try both directions.\n\treal32 CheckDistance = 10000;\n\tintersection_point P = {};\n\n\tP = GetIntersection(Line.Start, Line.End, Point, Point + (LinePerp * CheckDistance));\n\tif (P.Valid) { return P.Point; }\n\n\tP = GetIntersection(Line.Start, Line.End, Point, Point + (LinePerp * -CheckDistance));\n\tif (P.Valid) { return P.Point; }\n\n\t// This should never happen\n\tAssert(0);\n\treturn {};\n}\n\n#include \"LinkedList.cpp\"\n#include \"Collision.cpp\"\n\n#include \"Hash.cpp\"\n#include \"Random.cpp\"\n\n#include \"Hash.cpp\"\n#include \"Random.cpp\"\n#include \"Range.cpp\"\n\n#include \"Audio.cpp\"\n#include \"Sorts.cpp\"\n\n#include \"ParticleSystem.cpp\"\n#include \"Util.cpp\"\n\n#include \"../Game/Game.h\"\n#include \"../Game/AssetList.h\"\n#include \"CSV.cpp\"\n\nenum class meta_member_type {\n\tuint8, uint16, uint32,\n\tint8, int16, int32, int64,\n\treal32, real64, bool32,\n\n\t// structs / classes / custom types\n\tcustom, enumeration\n};\n\nstruct meta_member;\n\n#include \"SaveData.h\"\n#include \"Json.h\"\n\ntypedef void(*save_data_fill_shim)(save_data::member* Dest, string KeyParent, void* AccData);\n\ntypedef void(*struct_meta_fill_shim_func)(json::struct_string_return* Dest, void* AccData);\ntypedef void(*json_fill_struct_shim)(json::json_data* JsonData, string KeyParent, void* DataDest);\n\nstruct meta_member {\n\tmeta_member_type Type;\n\tstring TypeString;\n\tstring Name;\n\tuint64 Offset;\n\tbool32 ArrayLength;\n\tuint32 Size;\n\n\t// Data for custom types\n\tstruct_meta_fill_shim_func MetaFillShim;\n\tjson_fill_struct_shim JsonFillShim;\n\n\tsave_data_fill_shim SaveDataFillShim;\n\n\tmeta_member* CustomMetaInfo;\n\tint32 CustomMetaInfoCount;\n\n};\n\n#include \"Json.cpp\"\n#include \"SaveData.cpp\"\n\n#include \"Generated.h\"\n\n#include \"Editor.h\"\n#include \"Renderer/ShaderLoader.cpp\"\n#include \"ui/UiPanel.h\"\n\nstruct globals {\n\n\t// Here for loading thread. Better way to do this than make them globals??\n\tstring AssetRootDir;\n\tengine_state* GameState;\n\n\twindow_info* Window;\n\n\tshader_loader ShaderLoader;\n\tassets_list AssetsList;\n\n\teditor::data EditorData;\n\n\tuint32 IDSelected;\n\n\trenderer* UIRenderer;\n\trenderer* DebugUIRenderer;\n\trenderer* GameRenderer;\n\tcamera* ActiveCam;\n\n\tint32 GizmoColorStackIndex = 0;\n\tcolor GizmoColorStack[10];\n\n\tgame_input* Input;\n\n\t// For debugging purposes\n\tentity* UnitCube;\n\n\tloaded_font OpenSansRegular;\n\tloaded_font OpenSansBold;\n\n\tloaded_font RajMedium;\n\tloaded_font RajBold;\n\tloaded_font RajSemiBold;\n\n\tgame_input* UIUserInput;\n\tui_panels* UIPanels;\n\n\tfont_style FontStyleP;\n\tfont_style FontStyleH1;\n\tfont_style FontStyleH2;\n\tfont_style FontStyleH3;\n\tfont_style FontStyleButton;\n\tfont_style FontStyleDropInfo;\n};\nglobals* Globals;\n\n#include \"../Game/AssetList.cpp\"\n\n#include \"Renderer/Renderer.cpp\"\n#include \"gizmos.cpp\"\n#include \"scene/scene.cpp\"\n#include \"camera/camera.cpp\"\n#include \"Font.cpp\"\n#include \"ui/ui.cpp\"\n\nvoid ProgressBar(vector2 TopLeft,\n                 real64 Height, real64 Width, real64 Progress,\n                 string Contents, real32 ContentsSize, color ContentsColor,\n                 color BGColor, color FGColor\n                )\n{\n\t// Experience bar\n\treal64 LengthCurrent = Width * Progress;\n\n\tFontRenderString(&Globals->FontStyleH3, Contents,\n\t                 TopLeft + vector2{LengthCurrent, 20},\n\t                 ContentsColor, 0, Globals->UIRenderer);\n\n\t// bg\n\tRenderScreenLineMesh(TopLeft + vector2{0, 10},\n\t                     TopLeft + vector2{Width, 10},\n\t                     (real32)Height, BGColor, Globals->UIRenderer);\n\n\t// bar\n\tRenderScreenLineMesh(TopLeft + vector2{0, 10},\n\t                     TopLeft + vector2{LengthCurrent, 10},\n\t                     (real32)Height, FGColor, Globals->UIRenderer);\n\n}\n\n#include \"ModelLoading/obj.cpp\"\n\n#include \"imguiHelper.cpp\"\n#include \"Profiler.cpp\"\n\n#include \"../Game/Game.cpp\"\n\nentity* CheckSceneSelection(scene * Scene, renderer * GameRenderer, camera * Cam, window_info * WindowInfo)\n{\n\t// This will prevent selection when moving an object. but we don't do that a whole lot\n\t//if (Globals->Input->MouseLeft.OnDown && (MovingState == moving_state::none || MovingState == moving_state::translation_choice)) {\n\n\t// Check for selection\n\tif (Globals->Input->TouchStatus[0].OnDown ) {\n\t\tGlobals->IDSelected = RenderApi.DoPickRender(Cam, Globals->Input->MousePos, *WindowInfo);\n\n\t\tfor (uint32 i = 0; i < ArrayCount(Scene->Entities); i++) {\n\n\t\t\tentity* Entity = Scene->Entities[i];\n\t\t\tif (Entity != GameNull && Entity->ID == Globals->IDSelected) {\n\t\t\t\t//editor::EntitySelected(Entity, GameState);\n\t\t\t\treturn Entity;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn GameNull;\n}\n\n#include \"Editor.cpp\"\n#include \"ui/UiPanel.cpp\"\n\nvoid PollModelReload(game_memory * Memory, game_assets * Assets)\n{\n\tfor (int x = 0; x < Assets->ModelPolling.Count; x++) {\n\t\tmodel* Obj = Assets->ModelPolling.Models[x];\n\n\t\tuint64 CurrWriteTime = PlatformApi.GetFileWriteTime(Obj->FileDir.CharArray);\n\n\t\tif (CurrWriteTime != Obj->FileWriteTime) {\n\t\t\t// !!!!!!!!!!!!! this will leak!!!\n\t\t\t//Dae::Load(Obj, Obj->FileDir, Memory, false, Assets);\n\t\t}\n\t}\n}\n\n// Initial setup, from loading assets to initializing data\nvoid GameSetup()\n{\n\tGlobalThreadTransMem->Head = (uint8 *)GlobalThreadTransMem->Memory;\n\tassets::LoadAssets(&Globals->AssetsList, Globals->AssetRootDir, GlobalThreadTransMem);\n}\n\nvoid GameSetupThread(void* Params, int32 ThreadID)\n{\n\tGameSetup();\n}\n\nvoid ImGuiSetEditorTheme()\n{\n\tImVec4* colors = ImGui::GetStyle().Colors;\n\tcolors[ImGuiCol_Text]                   = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);\n\tcolors[ImGuiCol_TextDisabled]           = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);\n\tcolors[ImGuiCol_WindowBg]               = ImVec4(0.06f, 0.06f, 0.06f, 0.94f);\n\tcolors[ImGuiCol_ChildBg]                = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);\n\tcolors[ImGuiCol_PopupBg]                = ImVec4(0.08f, 0.08f, 0.08f, 0.94f);\n\tcolors[ImGuiCol_Border]                 = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);\n\tcolors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);\n\tcolors[ImGuiCol_FrameBg]                = ImVec4(0.16f, 0.29f, 0.48f, 0.54f);\n\tcolors[ImGuiCol_FrameBgHovered]         = ImVec4(0.26f, 0.59f, 0.98f, 0.40f);\n\tcolors[ImGuiCol_FrameBgActive]          = ImVec4(0.26f, 0.59f, 0.98f, 0.67f);\n\tcolors[ImGuiCol_TitleBg]                = ImVec4(0.04f, 0.04f, 0.04f, 1.00f);\n\tcolors[ImGuiCol_TitleBgActive]          = ImVec4(0.16f, 0.29f, 0.48f, 1.00f);\n\tcolors[ImGuiCol_TitleBgCollapsed]       = ImVec4(0.00f, 0.00f, 0.00f, 0.51f);\n\tcolors[ImGuiCol_MenuBarBg]              = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);\n\tcolors[ImGuiCol_ScrollbarBg]            = ImVec4(0.02f, 0.02f, 0.02f, 0.53f);\n\tcolors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.31f, 0.31f, 0.31f, 1.00f);\n\tcolors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.41f, 0.41f, 0.41f, 1.00f);\n\tcolors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);\n\tcolors[ImGuiCol_CheckMark]              = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\n\tcolors[ImGuiCol_SliderGrab]             = ImVec4(0.24f, 0.52f, 0.88f, 1.00f);\n\tcolors[ImGuiCol_SliderGrabActive]       = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\n\tcolors[ImGuiCol_Button]                 = ImVec4(0.26f, 0.59f, 0.98f, 0.40f);\n\tcolors[ImGuiCol_ButtonHovered]          = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\n\tcolors[ImGuiCol_ButtonActive]           = ImVec4(0.06f, 0.53f, 0.98f, 1.00f);\n\tcolors[ImGuiCol_Header]                 = ImVec4(0.26f, 0.59f, 0.98f, 0.31f);\n\tcolors[ImGuiCol_HeaderHovered]          = ImVec4(0.26f, 0.59f, 0.98f, 0.80f);\n\tcolors[ImGuiCol_HeaderActive]           = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\n\tcolors[ImGuiCol_Separator]              = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);\n\tcolors[ImGuiCol_SeparatorHovered]       = ImVec4(0.10f, 0.40f, 0.75f, 0.78f);\n\tcolors[ImGuiCol_SeparatorActive]        = ImVec4(0.10f, 0.40f, 0.75f, 1.00f);\n\tcolors[ImGuiCol_ResizeGrip]             = ImVec4(0.26f, 0.59f, 0.98f, 0.25f);\n\tcolors[ImGuiCol_ResizeGripHovered]      = ImVec4(0.26f, 0.59f, 0.98f, 0.67f);\n\tcolors[ImGuiCol_ResizeGripActive]       = ImVec4(0.26f, 0.59f, 0.98f, 0.95f);\n\tcolors[ImGuiCol_Tab]                    = ImVec4(0.18f, 0.35f, 0.58f, 0.86f);\n\tcolors[ImGuiCol_TabHovered]             = ImVec4(0.26f, 0.59f, 0.98f, 0.80f);\n\tcolors[ImGuiCol_TabActive]              = ImVec4(0.20f, 0.41f, 0.68f, 1.00f);\n\tcolors[ImGuiCol_TabUnfocused]           = ImVec4(0.07f, 0.10f, 0.15f, 0.97f);\n\tcolors[ImGuiCol_TabUnfocusedActive]     = ImVec4(0.14f, 0.26f, 0.42f, 1.00f);\n\tcolors[ImGuiCol_PlotLines]              = ImVec4(0.61f, 0.61f, 0.61f, 1.00f);\n\tcolors[ImGuiCol_PlotLinesHovered]       = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);\n\tcolors[ImGuiCol_PlotHistogram]          = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);\n\tcolors[ImGuiCol_PlotHistogramHovered]   = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);\n\tcolors[ImGuiCol_TextSelectedBg]         = ImVec4(0.26f, 0.59f, 0.98f, 0.35f);\n\tcolors[ImGuiCol_DragDropTarget]         = ImVec4(1.00f, 1.00f, 0.00f, 0.90f);\n\tcolors[ImGuiCol_NavHighlight]           = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);\n\tcolors[ImGuiCol_NavWindowingHighlight]  = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);\n\tcolors[ImGuiCol_NavWindowingDimBg]      = ImVec4(0.80f, 0.80f, 0.80f, 0.20f);\n\tcolors[ImGuiCol_ModalWindowDimBg]       = ImVec4(0.80f, 0.80f, 0.80f, 0.35f);\n}\n\nvoid ImGuiSetGameTheme()\n{\n\tImVec4* colors = ImGui::GetStyle().Colors;\n\tcolors[ImGuiCol_Text]                   = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);\n\tcolors[ImGuiCol_TextDisabled]           = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);\n\tcolors[ImGuiCol_WindowBg]               = ImVec4(0.11f, 0.11f, 0.11f, 1.00f);\n\tcolors[ImGuiCol_ChildBg]                = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);\n\tcolors[ImGuiCol_PopupBg]                = ImVec4(0.19f, 0.19f, 0.19f, 0.92f);\n\tcolors[ImGuiCol_Border]                 = ImVec4(0.19f, 0.19f, 0.19f, 0.29f);\n\tcolors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.24f);\n\tcolors[ImGuiCol_FrameBg]                = ImVec4(0.05f, 0.05f, 0.05f, 0.54f);\n\tcolors[ImGuiCol_FrameBgHovered]         = ImVec4(0.19f, 0.19f, 0.19f, 0.54f);\n\tcolors[ImGuiCol_FrameBgActive]          = ImVec4(0.20f, 0.22f, 0.23f, 1.00f);\n\tcolors[ImGuiCol_TitleBg]                = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);\n\tcolors[ImGuiCol_TitleBgActive]          = ImVec4(0.06f, 0.06f, 0.06f, 1.00f);\n\tcolors[ImGuiCol_TitleBgCollapsed]       = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);\n\tcolors[ImGuiCol_MenuBarBg]              = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);\n\tcolors[ImGuiCol_ScrollbarBg]            = ImVec4(0.05f, 0.05f, 0.05f, 0.54f);\n\tcolors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.34f, 0.34f, 0.34f, 0.54f);\n\tcolors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.40f, 0.40f, 0.40f, 0.54f);\n\tcolors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.56f, 0.56f, 0.56f, 0.54f);\n\tcolors[ImGuiCol_CheckMark]              = ImVec4(0.76f, 0.19f, 0.15f, 1.00f);\n\tcolors[ImGuiCol_SliderGrab]             = ImVec4(0.34f, 0.34f, 0.34f, 0.54f);\n\tcolors[ImGuiCol_SliderGrabActive]       = ImVec4(0.56f, 0.56f, 0.56f, 0.54f);\n\tcolors[ImGuiCol_Button]                 = ImVec4(0.76f, 0.19f, 0.12f, 0.54f);\n\tcolors[ImGuiCol_ButtonHovered]          = ImVec4(0.44f, 0.10f, 0.07f, 0.54f);\n\tcolors[ImGuiCol_ButtonActive]           = ImVec4(0.76f, 0.19f, 0.12f, 1.00f);\n\tcolors[ImGuiCol_Header]                 = ImVec4(0.00f, 0.00f, 0.00f, 0.52f);\n\tcolors[ImGuiCol_HeaderHovered]          = ImVec4(0.00f, 0.00f, 0.00f, 0.36f);\n\tcolors[ImGuiCol_HeaderActive]           = ImVec4(0.20f, 0.22f, 0.23f, 0.33f);\n\tcolors[ImGuiCol_Separator]              = ImVec4(0.28f, 0.28f, 0.28f, 0.29f);\n\tcolors[ImGuiCol_SeparatorHovered]       = ImVec4(0.44f, 0.44f, 0.44f, 0.29f);\n\tcolors[ImGuiCol_SeparatorActive]        = ImVec4(0.40f, 0.44f, 0.47f, 1.00f);\n\tcolors[ImGuiCol_ResizeGrip]             = ImVec4(0.28f, 0.28f, 0.28f, 0.29f);\n\tcolors[ImGuiCol_ResizeGripHovered]      = ImVec4(0.44f, 0.44f, 0.44f, 0.29f);\n\tcolors[ImGuiCol_ResizeGripActive]       = ImVec4(0.40f, 0.44f, 0.47f, 1.00f);\n\tcolors[ImGuiCol_Tab]                    = ImVec4(0.00f, 0.00f, 0.00f, 0.52f);\n\tcolors[ImGuiCol_TabHovered]             = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);\n\tcolors[ImGuiCol_TabActive]              = ImVec4(0.20f, 0.20f, 0.20f, 0.36f);\n\tcolors[ImGuiCol_TabUnfocused]           = ImVec4(0.00f, 0.00f, 0.00f, 0.52f);\n\tcolors[ImGuiCol_TabUnfocusedActive]     = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);\n\tcolors[ImGuiCol_PlotLines]              = ImVec4(1.00f, 0.00f, 0.00f, 1.00f);\n\tcolors[ImGuiCol_PlotLinesHovered]       = ImVec4(1.00f, 0.00f, 0.00f, 1.00f);\n\tcolors[ImGuiCol_PlotHistogram]          = ImVec4(1.00f, 0.00f, 0.00f, 1.00f);\n\tcolors[ImGuiCol_PlotHistogramHovered]   = ImVec4(1.00f, 0.00f, 0.00f, 1.00f);\n\tcolors[ImGuiCol_TextSelectedBg]         = ImVec4(0.20f, 0.22f, 0.23f, 1.00f);\n\tcolors[ImGuiCol_DragDropTarget]         = ImVec4(0.33f, 0.67f, 0.86f, 1.00f);\n\tcolors[ImGuiCol_NavHighlight]           = ImVec4(1.00f, 0.00f, 0.00f, 1.00f);\n\tcolors[ImGuiCol_NavWindowingHighlight]  = ImVec4(1.00f, 0.00f, 0.00f, 0.70f);\n\tcolors[ImGuiCol_NavWindowingDimBg]      = ImVec4(1.00f, 0.00f, 0.00f, 0.20f);\n\tcolors[ImGuiCol_ModalWindowDimBg]       = ImVec4(0.80f, 0.80f, 0.80f, 0.35f);\n\n\n\tImGuiStyle& style = ImGui::GetStyle();\n\tstyle.WindowPadding                     = ImVec2(8.00f, 5.00f);\n\tstyle.FramePadding                      = ImVec2(3.00f, 2.00f);\n\t//style.CellPadding                       = ImVec2(6.00f, 6.00f);\n\tstyle.ItemSpacing                       = ImVec2(6.00f, 3.00f);\n\tstyle.ItemInnerSpacing                  = ImVec2(3.00f, 3.00f);\n\tstyle.TouchExtraPadding                 = ImVec2(0.00f, 0.00f);\n\tstyle.IndentSpacing                     = 17;\n\tstyle.ScrollbarSize                     = 14;\n\tstyle.GrabMinSize                       = 10;\n\tstyle.WindowBorderSize                  = 0;\n\tstyle.ChildBorderSize                   = 0;\n\tstyle.PopupBorderSize                   = 0;\n\tstyle.FrameBorderSize                   = 0;\n\tstyle.TabBorderSize                     = 0;\n\n\tstyle.WindowRounding                    = 0;\n\tstyle.ChildRounding                     = 0;\n\tstyle.FrameRounding                     = 0;\n\tstyle.PopupRounding                     = 0;\n\tstyle.ScrollbarRounding                 = 0;\n\tstyle.GrabRounding                      = 0;\n\t//style.LogSliderDeadzone                 = 0;\n\tstyle.TabRounding                       = 0;\n}\n\nWIN_EXPORT void GameLoop(game_memory * Memory, game_input * GameInput, window_info * WindowInfo, game_audio_output_buffer * AudioBuffer, char* RootAssetPath)\n{\n\tAssert(sizeof(engine_state) <= Memory->PermanentMemory.Size);\n\tengine_state *GameState = (engine_state *)Memory->PermanentMemory.Memory;\n\tstate_to_serialize* State = &GameState->StateSerializing;\n\tAssert(GameState);\n\n\tMemory->TransientMemory.Head = (uint8 *)Memory->TransientMemory.Memory;\n\n\t// Setup global state\n\tRenderApi = Memory->RenderApi;\n\tPlatformApi = Memory->PlatformApi;\n\tGlobalTransMem = &Memory->TransientMemory;\n\tGlobalThreadTransMem = &Memory->ThreadTransientMemory;\n\tGlobalPermMem = &Memory->PermanentMemory;\n\n\tGlobals = GameState->Globals;\n\n\trender::Data = GameState->RenderData;\n\n\tGlobalProfilerData = &GameState->ProfilerData;\n\tGlobalProfilerData->Platform = &PlatformApi;\n\tGameState->OGLProfilerData.Platform = &PlatformApi;\n\n\t// -------------------------------------------------------------------------\n\n\tGameState->GameRenderer.RenderCommands = CreateList(GlobalTransMem, sizeof(render_command));\n\tGameState->DebugUIRenderer.RenderCommands = CreateList(GlobalTransMem, sizeof(render_command));\n\tGameState->UIRenderer.RenderCommands = CreateList(GlobalTransMem, sizeof(render_command));\n\n\tGameState->ClearColor = color{60.0f / 255.0f, 72.0f / 255.0f, 87.0f / 255.0f, 1.0f};\n\n\tState->TimeRunningMS += (uint64)GameState->DeltaTimeMS;\n\n\tif (GameInput->MouseLeft.OnDown) {\n\t\tGameInput->MousePosOnDown = GameInput->MousePos;\n\t}\n\n\tstatic thread_work* SetupWork = {};\n\n\t// Initialization\n\tif (!Memory->IsInitialized) {\n\t\tstring AssetRootDir = RootAssetPath;\n\t\tGameState->RootAssetPath = AssetRootDir;\n\n\t\tMemory->IsInitialized = true;\n\t\tGameState->Assets = (game_assets*)ArenaAllocate(&Memory->PermanentMemory, sizeof(game_assets));\n\t\tGameState->Globals = (globals*)ArenaAllocate(&Memory->PermanentMemory, sizeof(globals));\n\t\tGameState->RenderData = (render::data*)ArenaAllocate(&Memory->PermanentMemory, sizeof(render::data));\n\n\t\tGlobals = GameState->Globals;\n\t\tGlobals->Window = WindowInfo;\n\t\tGlobals->Input = GameInput;\n\t\tGlobals->AssetRootDir = AssetRootDir;\n\t\tGlobals->GameState = GameState;\n\n\t\trender::Data = GameState->RenderData;\n\n\t\tGizmoPushColor(COLOR_RED);\n\n\t\tAllocateProfiler();\n\n\t\tState->Scene.Init();\n\n\t\tGlobals->UIPanels = (ui_panels*)ArenaAllocate(GlobalPermMem, sizeof(ui_panels) * (int)panel_id::count);\n\t\tGlobals->UIPanels->Setup();\n\t\tGlobals->UIUserInput = GameInput;\n\n\t\t// Load and setup basic engine resources\n\t\t{\n\t\t\t// Load engine resources unit cube\n\t\t\tDae::Load(&GameState->Assets->UnitCube, AssetRootDir + \"UnitCube.dae\", true, GlobalTransMem);\n\t\t\tGlobals->UnitCube = assets::AllocateEntity(\"UnitCube\");\n\n\t\t\t// Engine resource shaders\n\t\t\t{\n\t\t\t\tGlobals->ShaderLoader.Load(&Globals->AssetsList.EngineResources.ScreenDrawShader,\n\t\t\t\t                           AssetRootDir + \"Shaders/ScreenDraw.vs\",\n\t\t\t\t                           AssetRootDir + \"Shaders/ScreenDraw.fs\",\n\t\t\t\t                           GlobalTransMem);\n\t\t\t\tRenderApi.MakeProgram(&Globals->AssetsList.EngineResources.ScreenDrawShader);\n\n\t\t\t\tGlobals->ShaderLoader.Load(&Globals->AssetsList.EngineResources.ScreenDrawTextureShader,\n\t\t\t\t                           AssetRootDir + \"Shaders/ScreenDrawTexture.vs\",\n\t\t\t\t                           AssetRootDir + \"Shaders/ScreenDrawTexture.fs\",\n\t\t\t\t                           GlobalTransMem);\n\t\t\t\tRenderApi.MakeProgram(&Globals->AssetsList.EngineResources.ScreenDrawTextureShader);\n\n\n\t\t\t\tGlobals->ShaderLoader.Load(&Globals->AssetsList.EngineResources.ImGuiShader,\n\t\t\t\t                           AssetRootDir + \"Shaders/ImGui.vs\",\n\t\t\t\t                           AssetRootDir + \"Shaders/imGui.fs\",\n\t\t\t\t                           GlobalTransMem);\n\t\t\t\tRenderApi.MakeProgram(&Globals->AssetsList.EngineResources.ImGuiShader);\n\t\t\t}\n\n\t\t\t// Create default white image for renderer\n\t\t\trender::Data->WhiteImage = assets::GLLoadPNG(RootAssetPath + string{\"SingleWhitePixel.png\"}, gl_blend_type::linear, correct_gamma::no, GlobalTransMem);\n\n\t\t\t// Cameras and some lights. Not all of this is stricly engine resources\n\t\t\t{\n\t\t\t\t// Init Camera\n\t\t\t\tInitCamera(&GameState->GameCamera, &GameState->Assets->CamBasicShader,\n\t\t\t\t           vector2{(real64)WindowInfo->Width, (real64)WindowInfo->Height}, projection::orthographic, 0,\n\t\t\t\t           0.1f, 10.0f);\n\t\t\t\tGameState->GameCamera.EulerRotation = vector3{PI * -0.5f, -1.57, 0};\n\n\t\t\t\tInitCamera(&State->UICam, &GameState->Assets->CamBasicShader,\n\t\t\t\t           vector2{(real64)WindowInfo->Width, (real64)WindowInfo->Height}, projection::brokenui, 0,\n\t\t\t\t           -10.0f, 10.0f);\n\t\t\t\tState->UICam.EulerRotation = vector3{PI, -0.88f, 0};\n\n\t\t\t\tInitCamera(&State->BattleCam, &GameState->Assets->CamBasicShader,\n\t\t\t\t           vector2{(real64)WindowInfo->Width, (real64)WindowInfo->Height}, projection::perspective, 0,\n\t\t\t\t           0.1f, 1200.0f);\n\t\t\t\tState->BattleCam.EulerRotation = vector3{3.14159f, -0.822f, 0};\n\t\t\t\tState->BattleCam.Center = vector3{ -9.024, 0, 18.0f};\n\n\t\t\t\tInitCamera(&State->EditorCamera, &GameState->Assets->CamBasicShader,\n\t\t\t\t           vector2{(real64)WindowInfo->Width, (real64)WindowInfo->Height}, projection::perspective, 0,\n\t\t\t\t           0.1f, 1200.0f);\n\n\t\t\t\tState->ActiveCam = &GameState->GameCamera;\n\n\t\t\t\t// Light camera\n\t\t\t\tInitCamera(&State->Light.Cam, &GameState->Assets->CamBasicShader,\n\t\t\t\t           vector2{(real64)WindowInfo->Width, (real64)WindowInfo->Height}, projection::perspective, 0,\n\t\t\t\t           0.1f, 1200.0f);\n\t\t\t\tState->Light.Cam.EulerRotation = vector3{2.36f, -1.184f, 0.0f};\n\t\t\t\tState->Light.Cam.Center = vector3{ -3.5f, 3.6f, 7.8f};\n\n\t\t\t\t{\n\t\t\t\t\tState->LightTwo.Type = light_type::directional;\n\t\t\t\t\tState->LightTwo.Transform.LocalPos = vector3{0, 0, 2};\n\t\t\t\t\tState->LightTwo.Transform.LocalRot = vector3{ -0.299, -3.47f, 0.321f};\n\t\t\t\t\tState->LightTwo.Color = color{10, 10, 10};\n\t\t\t\t\trender::RegisterLight(&State->LightTwo);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassets::UploadAllQueuedImages(&Globals->AssetsList, GlobalTransMem);\n\t\t}\n\n\t\tGameState->GameRenderer.Camera = &GameState->GameCamera;\n\t\tGameState->DebugUIRenderer.Camera = &State->UICam;\n\t\tGameState->UIRenderer.Camera = &State->UICam;\n\n\t\tGlobals->GameRenderer = &GameState->GameRenderer;\n\t\tGlobals->UIRenderer = &GameState->UIRenderer;\n\t\tGlobals->DebugUIRenderer = &GameState->DebugUIRenderer;\n\n\t\t// Setup and Load game data\n\t\t// Load stuff\n\t\t{\n\t\t\t//SetupWork = PlatformApi.ThreadAddWork(GameSetupThread, 0);\n\t\t\t//GameSetup();\n\t\t\tassets::LoadAssets(&Globals->AssetsList, Globals->AssetRootDir, GlobalTransMem);\n\n\t\t\t// Compile shaders\n\t\t\tfor (int i = 0; i < Globals->AssetsList.ShadersCount; i++) {\n\n\t\t\t\tConsoleLog(\"Compiling shader\");\n\t\t\t\tshader* Shader = &Globals->AssetsList.Shaders[i].Shader;\n\n\t\t\t\tRenderApi.MakeProgram(Shader);\n\t\t\t}\n\n\t\t\tassets::UploadAllQueuedImages(&Globals->AssetsList, GlobalTransMem);\n\t\t\t//assets::UploadAllQueuedEntities(&Globals->AssetsList);\n\t\t}\n\n\t\t//PanelStackPush(panel_id::home, &State->PanelStack, State);\n\t\tStart(GameState);\n\n#if UNIT_TESTING\n\t\tLinkedListUnitTests(&Memory->TransientMemory);\n\n\t\t// Verify type sizes\n\t\tAssert(sizeof(uint8) == 1);\n\t\tAssert(sizeof(uint16) == 2);\n\t\tAssert(sizeof(uint32) == 4);\n\t\tAssert(sizeof(uint64) == 8);\n\n\t\tStringUnitTests(&Memory->TransientMemory);\n\t\tRandomUnitTests();\n\n\t\t// Remove slide testing\n\t\t{\n\t\t\tint32 Array[10];\n\t\t\tfor (int i = 0; i < ArrayCount(Array); i++) {\n\t\t\t\tArray[i] = i;\n\t\t\t}\n\n\t\t\tRemoveSlideArray((void*)&Array[0], ArrayCount(Array), sizeof(int32), 1);\n\t\t\tRemoveSlideArray((void*)&Array[0], ArrayCount(Array), sizeof(int32), 5);\n\t\t}\n#endif\n\t}\n\n\tGlobals->ActiveCam = State->ActiveCam;\n\n\t// Update camera matricies\n\tState->ActiveCam->UpdateMatricies();\n\tState->UICam.UpdateMatricies();\n\n\tif (Memory->HotReloaded) {\n\t\tGlobals->UIPanels->Setup();\n\t}\n\n\n\t// Editor / mouse touch emulation\n\t{\n\t\t// Toggle on / off\n\t\tbool EditorPrev = Globals->EditorData.EditorMode;\n\n\t\t/*\n\t\t// Do mouse touch emulation\n\t\teditor::SwitchToEditorCam(GameState);\n\n\t\tstatic int GLID = assets::GetImage(\"Gizmo_Circle\")->GLID;\n\t\tRenderTextureCenter(Globals->Input->MousePos,\n\t\t                    vector2{8, 8},\n\t\t                    color{1, 0, 0, 1},\n\t\t                    vector2{}, vector2{1, 1},\n\t\t                    GLID,\n\t\t                    0,\n\t\t                    Globals->DebugUIRenderer);\n\t\t*/\n\n\t\tif (Globals->EditorData.EditorMode) {\n\t\t\t// Disable touch input\n\t\t\tGlobals->Input->TouchStatus[0].OnDown = false;\n\t\t\tGlobals->Input->TouchStatus[0].IsDown = false;\n\t\t} else {\n\n\t\t\t// Disable mouse input\n\t\t\t/*\n\t\t\tGlobals->Input->MouseLeft.OnDown = false;\n\t\t\tGlobals->Input->MouseLeft.IsDown = false;\n\t\t\tGlobals->Input->MouseRight.OnDown = false;\n\t\t\tGlobals->Input->MouseRight.IsDown = false;\n\t\t\tGlobals->Input->MousePos = vector2{ -1, -1};\n\t\t\t*/\n\t\t}\n\t}\n\n\tui::NextAnimState = 0;\n\n\t// imgui init\n\tif (!Memory->ImguiInitialized) {\n\n\t\tMemory->ImguiInitialized = true;\n\t\tImGui::CreateContext();\n\t\tImGuiIO& io = ImGui::GetIO();\n\t\tio.DisplaySize.x = (float)WindowInfo->Width;\n\t\tio.DisplaySize.y = (float)WindowInfo->Height;\n\n\t\t// Keyboard mapping. ImGui will use those indices to peek into the io.KeysDown[] array that we will update during the application lifetime.\n\t\t// Removed for android. ImGui doesn't do anything on android, so what do?\n\t\tio.KeyMap[ImGuiKey_Backspace] = KEY_BACK;\n\t\tio.KeyMap[ImGuiKey_Tab] = KEY_TAB;\n\t\tio.KeyMap[ImGuiKey_LeftArrow] = KEY_LEFT;\n\t\tio.KeyMap[ImGuiKey_RightArrow] = KEY_RIGHT;\n\t\tio.KeyMap[ImGuiKey_UpArrow] = KEY_UP;\n\t\tio.KeyMap[ImGuiKey_DownArrow] = KEY_DOWN;\n\t\tio.KeyMap[ImGuiKey_PageUp] = KEY_PRIOR;\n\t\tio.KeyMap[ImGuiKey_PageDown] = KEY_NEXT;\n\t\tio.KeyMap[ImGuiKey_Home] = KEY_HOME;\n\t\tio.KeyMap[ImGuiKey_End] = KEY_END;\n\t\tio.KeyMap[ImGuiKey_Insert] = KEY_INSERT;\n\t\tio.KeyMap[ImGuiKey_Delete] = KEY_DELETE;\n\t\tio.KeyMap[ImGuiKey_Space] = KEY_SPACE;\n\t\tio.KeyMap[ImGuiKey_Enter] = KEY_RETURN;\n\t\tio.KeyMap[ImGuiKey_Escape] = KEY_ESCAPE;\n\n\t\t//io.IniFilename = NULL;\n\n\t\t// ImGui create font texture\n\t\tunsigned char* pixels;\n\t\tint width, height;\n\t\tio.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);   // Load as RGBA\n\n\t\tloaded_image Result = {};\n\t\tResult.Width = width;\n\t\tResult.Height = height;\n\t\tRenderApi.MakeTexture(&Result, (uint32*)pixels, false);\n\t\tio.Fonts->SetTexID((ImTextureID)(intptr_t)Result.GLID);\n\t}\n\n\t// imgui each frame\n\t{\n\t\t// Setup low-level inputs (e.g. on Win32, GetKeyboardState(), or write to those fields from your Windows message loop handlers, etc.)\n\t\tImGuiIO& io = ImGui::GetIO();\n\t\tio.DisplaySize.x = (float)WindowInfo->Width;\n\t\tio.DisplaySize.y = (float)WindowInfo->Height;\n\t\tio.DeltaTime = 1.0f / 60.0f;\n\n\t\tif (GameInput->MouseScrollDelta != 0) {\n\t\t\tio.MouseWheel += (float)(GameInput->MouseScrollDelta > 0 ? +1.0f : -1.0f);\n\t\t}\n\n\t\t// update keyboard input\n\t\tfor (int index = 0; index < ArrayCount(GameInput->KeyboardInput); index++) {\n\t\t\tio.KeysDown[index] = GameInput->KeyboardInput[index].IsDown ? 1 : 0;\n\n\t\t\t// clear keyboard after sending to imgui so we don't trigger any of our own hotkeys\n\t\t\tif (io.WantTextInput) {\n\t\t\t\tGameInput->KeyboardInput[index] = {};\n\t\t\t}\n\t\t}\n\n\t\t//char KeyboardState[256] = {};\n\t\t// PBYTE KeyboardStatePointer = (PBYTE)(&KeyboardState);\n\t\t//GetKeyboardState((char*)&KeyboardState);\n\n\t\tio.AddInputCharacter(GameInput->InputChar);\n\t\tGameInput->InputChar = 0;\n\n\t\tImVec2 mousePos = {};\n\t\tmousePos.x = (float)GameInput->MousePos.X;\n\t\tmousePos.y = (float)GameInput->MousePos.Y;\n\t\tio.MousePos = mousePos;\n\t\tio.MouseDown[0] = GameInput->MouseLeft.IsDown != 0;\n\t\tio.MouseDown[1] = GameInput->MouseRight.IsDown != 0;\n\t}\n\n\tImGui::NewFrame();\n\n\t// Update touch input\n\t{\n\t\treal64 DragThreshold = 35.0f;\n\t\tstatic bool WentOutThreshold = false;\n\n\t\tfor (int i = 0; i < TOUCH_COUNT; i++) {\n\t\t\ttouch* Touch = &Globals->Input->Touches[i];\n\n\t\t\t// Tap gesture only lasts one frame, so rest it\n\t\t\tif (Touch->Gesture == touch_gesture::tap) {\n\t\t\t\tTouch->Gesture = touch_gesture::none;\n\t\t\t}\n\n\t\t\tif (Globals->Input->TouchStatus[i].OnDown) {\n\t\t\t\tTouch->Origin = Globals->Input->TouchPosition[i];\n\t\t\t\tTouch->Gesture = touch_gesture::none;\n\t\t\t}\n\t\t\tif (Globals->Input->TouchStatus[i].IsDown) {\n\t\t\t\tTouch->Position = Globals->Input->TouchPosition[i];\n\t\t\t\tTouch->Delta = Touch->Origin - Globals->Input->TouchPosition[i];\n\n\t\t\t\tTouch->FrameDelta = Touch->PositionLastFrame - Touch->Position;\n\t\t\t\tTouch->PositionLastFrame = Touch->Position;\n\n\t\t\t\tTouch->Gesture = touch_gesture::hold;\n\n\t\t\t\tif (Vector2Distance(Touch->Delta, {}) > DragThreshold) {\n\t\t\t\t\tWentOutThreshold = true;\n\t\t\t\t}\n\n\t\t\t\tif (WentOutThreshold) {\n\t\t\t\t\tTouch->Gesture = touch_gesture::drag;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Globals->Input->TouchStatus[i].OnUp) {\n\t\t\t\tWentOutThreshold = false;\n\n\t\t\t\tif (Touch->Gesture == touch_gesture::hold) {\n\t\t\t\t\tTouch->Gesture = touch_gesture::tap;\n\t\t\t\t} else {\n\t\t\t\t\tTouch->Gesture = touch_gesture::none;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Editor things\n\t{\n\t\tImGuiStyle& style = ImGui::GetStyle();\n\t\tif (!Globals->EditorData.EditorMode) {\n\t\t\tstyle.Alpha = 0.25f;\n\t\t}\n\t\tif (Globals->Input->KeyboardInput[KEY_TAB].OnDown) {\n\t\t\tGlobals->EditorData.EditorMode = !Globals->EditorData.EditorMode;\n\t\t}\n\n\t\t// TODO Don't compile on release builds\n\t\t//editor::Update(GameState, WindowInfo);\n\n\t\tstyle.Alpha = 1.0f;\n\t}\n\n\tGlobals->ShaderLoader.PollReload();\n\tPollModelReload(Memory, GameState->Assets);\n\n\tstatic bool DemoShowing = true;\n\t//ImGui::ShowDemoWindow(&DemoShowing);\n\n\t// Prevent mouse clicks for game if imgui captures mouse\n\tif (ImGui::GetIO().WantCaptureMouse) {\n\t\tGameInput->MouseScrollDelta = {};\n\n\t\tGameInput->MouseLeft.IsDown = false;\n\t\tGameInput->MouseLeft.OnDown = false;\n\t\tGameInput->MouseLeft.IsUp = false;\n\t\tGameInput->MouseLeft.OnUp = false;\n\t\tGameInput->MouseRight.OnDown = false;\n\t\tGameInput->MouseRight.IsDown = false;\n\t\tGameInput->MouseRight.IsUp = false;\n\t\tGameInput->MouseRight.OnUp = false;\n\t}\n\n\t// Camera\n\tif (Globals->EditorData.EditorMode) {\n\t\teditor::SwitchToEditorCam(GameState);\n\n\t\tstatic bool MouseControlling = false;\n\t\tif (GameInput->MouseRight.OnDown) {\n\t\t\tMouseControlling = true;\n\t\t}\n\t\tif (GameInput->MouseRight.OnUp) {\n\t\t\tMouseControlling = false;\n\t\t}\n\n\t\treal64 MouseSpeed = 0.004f;\n\n\t\tif (MouseControlling) {\n\t\t\tstatic vector2 MouseStart = {};\n\t\t\tstatic vector3 EulerStart = {};\n\t\t\tif (GameInput->MouseRight.OnDown) {\n\t\t\t\tMouseStart = GameInput->MousePos;\n\t\t\t\tEulerStart = State->ActiveCam->EulerRotation;\n\t\t\t}\n\n\t\t\tState->ActiveCam->EulerRotation.Y += GameInput->MouseDelta.Y * MouseSpeed;\n\t\t\tState->ActiveCam->EulerRotation.X += GameInput->MouseDelta.X * MouseSpeed;\n\n\t\t\treal64 Bottom = (-PI / 2.0f) + 0.01f;\n\t\t\treal64 Top = -Bottom;\n\t\t\tState->ActiveCam->EulerRotation.Y = ClampValue(Bottom, Top, State->ActiveCam->EulerRotation.Y);\n\n\t\t\t//Globals->EditorData.EditorMode = !Globals->EditorData.EditorMode;\n\t\t}\n\n\t\tif (GameInput->MouseRight.OnDown) {\n\t\t\tGameState->LockCursor = true;\n\t\t}\n\t\tif (GameInput->MouseRight.OnUp) {\n\t\t\tGameState->LockCursor = false;\n\t\t}\n\n\t\t// Fly camera controls\n\t\tif (!ImGui::GetIO().WantCaptureMouse && State->ActiveCam == &State->EditorCamera) {\n\n\t\t\t//real64 KeyboardSpeed = 3;\n\t\t\treal64 KeyboardSpeed = 1;\n\t\t\tif (GameInput->KeyboardInput[KEY_SHIFT].IsDown) {\n\t\t\t\t//KeyboardSpeed = 1.5f;\n\t\t\t}\n\n\t\t\treal64 WindowSpeed = 4.0f;\n\n\t\t\tif (GameInput->KeyboardInput['E'].IsDown) {\n\t\t\t\tState->ActiveCam->Center.Z += KeyboardSpeed;\n\t\t\t\teditor::SwitchToEditorCam(GameState);\n\t\t\t}\n\t\t\tif (GameInput->KeyboardInput['Q'].IsDown) {\n\t\t\t\tState->ActiveCam->Center.Z -= KeyboardSpeed;\n\t\t\t\teditor::SwitchToEditorCam(GameState);\n\t\t\t}\n\t\t\tif (GameInput->KeyboardInput['A'].IsDown) {\n\n\t\t\t\tvector3 Right = Vector3Cross(State->ActiveCam->Forward, vector3{0, 0, 1});\n\t\t\t\tRight = Vector3Normalize(Right);\n\t\t\t\tState->ActiveCam->Center = State->ActiveCam->Center - (Right * (real32)KeyboardSpeed);\n\n\t\t\t\teditor::SwitchToEditorCam(GameState);\n\t\t\t}\n\t\t\tif (GameInput->KeyboardInput['D'].IsDown) {\n\n\t\t\t\tvector3 Right = Vector3Cross(State->ActiveCam->Forward, vector3{0, 0, 1});\n\t\t\t\tRight = Vector3Normalize(Right);\n\t\t\t\tState->ActiveCam->Center = State->ActiveCam->Center + (Right * (real32)KeyboardSpeed);\n\n\t\t\t\teditor::SwitchToEditorCam(GameState);\n\t\t\t}\n\t\t\tif (GameInput->KeyboardInput['W'].IsDown) {\n\n\t\t\t\tif (GameInput->MouseRight.IsDown) {\n\t\t\t\t\tState->ActiveCam->Center = State->ActiveCam->Center - (State->ActiveCam->Forward * (real32)KeyboardSpeed);\n\t\t\t\t} else {\n\t\t\t\t\tm4y4 r = RotationZ(-(real32)State->ActiveCam->EulerRotation.X);\n\t\t\t\t\tvector3 Dir = Apply4y4(r, vector3{1, 0, 0});\n\t\t\t\t\tState->ActiveCam->Center = State->ActiveCam->Center - (Dir * (real32)KeyboardSpeed);\n\t\t\t\t}\n\n\t\t\t\teditor::SwitchToEditorCam(GameState);\n\t\t\t}\n\t\t\tif (GameInput->KeyboardInput['S'].IsDown) {\n\n\t\t\t\tif (GameInput->MouseRight.IsDown) {\n\t\t\t\t\tState->ActiveCam->Center = State->ActiveCam->Center + (State->ActiveCam->Forward * (real32)KeyboardSpeed);\n\t\t\t\t} else {\n\t\t\t\t\tm4y4 r = RotationZ(-(real32)State->ActiveCam->EulerRotation.X);\n\t\t\t\t\tvector3 Dir = Apply4y4(r, vector3{1, 0, 0});\n\t\t\t\t\tState->ActiveCam->Center = State->ActiveCam->Center + (Dir * (real32)KeyboardSpeed);\n\t\t\t\t}\n\n\t\t\t\teditor::SwitchToEditorCam(GameState);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tState->ActiveCam = &GameState->GameCamera;\n\t}\n\n\tif (GameInput->KeyboardInput['B'].OnDown) {\n\t\tGlobals->EditorData.GodMode = !Globals->EditorData.GodMode;\n\t}\n\n\t// Panel stuff\n\t/*\n\t{\n\t\tui_panel* ActivePanel = State->PanelStack.Panels[State->PanelStack.NextIndex - 1];\n\t\tif (ActivePanel->Overlay) {\n\t\t\tGlobals->UIUserInput = &EmptyInput;\n\t\t}\n\n\t\t// Render active panel and overlay\n\t\tif (ActivePanel->Overlay) {\n\n\t\t\tState->PanelStack.Panels[State->PanelStack.NextIndex - 2]->Render(State, WindowInfo);\n\n\t\t\t// Overlay background\n\t\t\tRenderRect(rect{0, 0, (real64)WindowInfo->Width, (real64)WindowInfo->Height}, color{0, 0, 0, 0.8f}, 0, Globals->UIRenderer);\n\t\t}\n\n\t\tGlobals->UIUserInput = GameInput;\n\t\tActivePanel->Render(State, WindowInfo);\n\t}\n\t*/\n\n\tImGuiSetGameTheme();\n\tLoop(GameState, WindowInfo, GameInput);\n\tImGuiSetEditorTheme();\n\n\t// Keep at the end, so it reports correctly on the frame\n\tif (Globals->EditorData.ProfilerWindowOpen) {\n\t\tprofiler::ImGuiProfiler(GameState, Memory, &GameState->ProfilerData, &GameState->OGLProfilerData);\n\t}\n\tprofiler::InitProfiler(&GameState->ProfilerData);\n\tprofiler::InitProfiler(&GameState->OGLProfilerData);\n\n\t// Render imgui\n\t{\n\t\tImGui::EndFrame();\n\n\t\tif (!BuildVarRelease) {\n\t\t\tImGui::Render();\n\n\t\t\tImDrawData* draw_data = ImGui::GetDrawData();\n\t\t\tImVec2 pos = draw_data->DisplayPos;\n\t\t\tfor (int n = 0; n < draw_data->CmdListsCount; n++) {\n\n\t\t\t\tconst ImDrawList* cmd_list = draw_data->CmdLists[n];\n\t\t\t\tconst ImDrawVert* vtx_buffer = cmd_list->VtxBuffer.Data;\n\t\t\t\tconst ImDrawIdx* idx_buffer = cmd_list->IdxBuffer.Data;\n\n\t\t\t\tfor (int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++) {\n\t\t\t\t\tconst ImDrawCmd* pcmd = &cmd_list->CmdBuffer[cmd_i];\n\n\t\t\t\t\trender_command RendCommand = {};\n\t\t\t\t\tInitRenderCommand(&RendCommand, pcmd->ElemCount);\n\n\t\t\t\t\tshader* Shader = assets::GetShader(\"ImGui\");\n\t\t\t\t\tif (Shader == GameNull) continue;\n\n\t\t\t\t\tRendCommand.Shader = *Shader;\n\n\t\t\t\t\tlayout_data* VertexLayout = RendCommand.GetLayout();\n\t\t\t\t\tVertexLayout->Allocate(Shader->GetLayout(render::ShaderVertID), RendCommand.BufferCapacity, GlobalTransMem);\n\t\t\t\t\tVertexLayout->LayoutInfo->Loc = RenderApi.GetAttribLocation(Shader, render::ShaderVertID);\n\n\t\t\t\t\tlayout_data* TextureLayout = RendCommand.GetLayout();\n\t\t\t\t\tTextureLayout->Allocate(Shader->GetLayout(render::ShaderTextureCoordsID), RendCommand.BufferCapacity, GlobalTransMem);\n\t\t\t\t\tTextureLayout->LayoutInfo->Loc = RenderApi.GetAttribLocation(Shader, render::ShaderTextureCoordsID);\n\n\t\t\t\t\tlayout_data* ColorLayout = RendCommand.GetLayout();\n\t\t\t\t\tColorLayout->Allocate(Shader->GetLayout(render::ShaderColorID), RendCommand.BufferCapacity, GlobalTransMem);\n\t\t\t\t\tColorLayout->LayoutInfo->Loc = RenderApi.GetAttribLocation(Shader, render::ShaderColorID);\n\n\t\t\t\t\tRendCommand.ClipRect = vector4{pcmd->ClipRect.x, pcmd->ClipRect.y, pcmd->ClipRect.z, pcmd->ClipRect.w};\n\n\t\t\t\t\t// Copy index buffer\n\t\t\t\t\tfor (uint32 i = 0; i < pcmd->ElemCount; i++) {\n\t\t\t\t\t\tint32 EI = idx_buffer[i];\n\t\t\t\t\t\tImColor ImCol = ImColor(vtx_buffer[EI].col);\n\n\t\t\t\t\t\tVertexLayout->Data.Vec3[i] = v3{vtx_buffer[EI].pos.x, vtx_buffer[EI].pos.y, 0};\n\t\t\t\t\t\tTextureLayout->Data.Vec2[i] = v2{vtx_buffer[EI].uv.x, vtx_buffer[EI].uv.y};\n\t\t\t\t\t\tColorLayout->Data.Vec4[i] = v4{ImCol.Value.x, ImCol.Value.y, ImCol.Value.z, ImCol.Value.w};\n\n\t\t\t\t\t\tRendCommand.IndexBuffer[i] = i;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tidx_buffer += pcmd->ElemCount;\n\n\t\t\t\t\t// Copy uniforms\n\t\t\t\t\tRendCommand.Uniforms = RendCommand.Shader.Uniforms.Copy(GlobalTransMem);\n\n\t\t\t\t\tRendCommand.Uniforms.SetImage(\"diffuseTex\", (uint64)pcmd->TextureId);\n\t\t\t\t\tRendCommand.Uniforms.SetMat4(\"projection\", m4y4Transpose(GameState->DebugUIRenderer.Camera->ProjectionMatrix));\n\t\t\t\t\tRendCommand.Uniforms.SetMat4(\"view\", m4y4Transpose(GameState->DebugUIRenderer.Camera->ViewMatrix));\n\n\t\t\t\t\t//Assert(false);\n\t\t\t\t\tInsertRenderCommand(&GameState->DebugUIRenderer, &RendCommand);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// This must happen after all TIME_BEGIN calls so that COUNTER is exactly the number of TIME_BEGIN calls\n// COPIED INTO ogles3.cpp\nvoid AllocateProfiler()\n{\n\tGlobalProfilerData->TimesCount = COUNTER;\n\n\tGlobalProfilerData->AccumulatedMethods = (accum_method*)ArenaAllocate(GlobalPermMem, GlobalProfilerData->TimesCount * sizeof(accum_method));\n\tGlobalProfilerData->AccumulatedMethodsGraphs = (graph_data*)ArenaAllocate(GlobalPermMem, GlobalProfilerData->TimesCount * sizeof(graph_data));\n}\n\n#endif\n",
			"file": "Game/code/Engine/EngineCore.cpp",
			"file_size": 37450,
			"file_write_time": 133334148266836487,
			"settings":
			{
				"buffer_size": 36452,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/UnityNVIMTransfer.txt",
			"settings":
			{
				"buffer_size": 129,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Digital Archive/ComputerEnhanceHW/calc_haversine/test_haversines/haversines_20k.json",
			"settings":
			{
				"buffer_size": 2115455,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Digital Archive/ComputerEnhanceHW/calc_haversine/test_haversines/haversines_one.json",
			"settings":
			{
				"buffer_size": 153,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Digital Archive/ComputerEnhanceHW/calc_haversine/build/haversines_one.json",
			"settings":
			{
				"buffer_size": 152,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "ryan testing here in file once more",
			"file": "/C/Users/perma/AppData/Local/nvim/testfile.txt",
			"file_size": 35,
			"file_write_time": 133289267111040078,
			"settings":
			{
				"buffer_size": 35,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Game/code/Engine/LinkedList.cpp",
			"settings":
			{
				"buffer_size": 18212,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Game/code/Engine/MemoryManager.cpp",
			"settings":
			{
				"buffer_size": 1344,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 148.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"",
				"ADB: Launch Fresh"
			],
			[
				"adb",
				"ADB: Launch Fresh"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"ad",
				"ADB: Launch Fresh"
			],
			[
				"launch",
				"ADB: Launch Fresh"
			],
			[
				"astyle",
				"SublimeAStyleFormatter: Format Current File"
			],
			[
				"pretty",
				"Pretty JSON: Validate"
			],
			[
				"seting",
				"Preferences: Settings"
			],
			[
				"tmp",
				"View: Toggle Minimap"
			],
			[
				"TMP",
				"View: Toggle Minimap"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"format",
				"SublimeAStyleFormatter: Format Current File"
			],
			[
				"prefer",
				"Preferences: Settings"
			],
			[
				"setting",
				"Preferences: Package Control Settings – User"
			],
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"bind",
				"Preferences: Key Bindings"
			],
			[
				"keybind",
				"Preferences: Key Bindings"
			],
			[
				"binding",
				"Preferences: Key Bindings"
			]
		],
		"width": 408.0
	},
	"console":
	{
		"height": 472.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/T/Game",
		"/T/Game/code",
		"/T/Game/code/Platform"
	],
	"file_history":
	[
		"/C/Users/perma/Desktop/hey.txt",
		"/T/Game/code/Engine/EngineCore.h",
		"/C/Users/perma/Desktop/server_run.txt",
		"/C/Users/perma/Desktop/VirbelaExercise1/Exercise1/VirbelaExercise1RyanRothweiler/Assets/Scripts/Highlight/HighlightTypeBehavior.cs",
		"/C/Digital Archive/ComputerEnhanceHW/gen_haversine/build/output/haversines.json",
		"/C/Digital Archive/ComputerEnhanceHW/gen_haversine/build/haversines.json",
		"/C/Digital Archive/ComputerEnhanceHW/gen_haversine/build/output/haversines.txt",
		"/C/Users/perma/Desktop/info.txt",
		"/C/Digital Archive/ComputerEnhanceHW/listings/listing_0056/listing_0056_estimating_cycles.txt",
		"/T/Game/code/Game/Item.h",
		"/C/Users/perma/Desktop/VirbelaExercise1/Exercise1/VirbelaExercise1RyanRothweiler/output.txt",
		"/C/Users/perma/Downloads/nircmd/New Text Document.txt",
		"/C/UnityNVIMTransfer.txt",
		"/C/Users/perma/AppData/Local/nvim/output.txt",
		"/C/Users/perma/Downloads/output.txt",
		"/C/Users/perma/Desktop/UnityNVIMTransfer.txt",
		"/C/Users/perma/AppData/Local/nvim/lua/ryan/testfile.txt",
		"/C/Users/perma/Desktop/progressjson.txt",
		"/C/Users/perma/Desktop/VirbelaExercise1/Exercise1/VirbelaExercise1RyanRothweiler/Assets/Scripts/Highlight/HighlightBehaviorBase.cs",
		"/T/Game/code/Engine/EngineCore.cpp",
		"/T/Game/code/Platform/platform_win32.cpp",
		"/C/Tripp/backend/firebase-backend/Tools/UnitySync/run.js",
		"/C/Tripp/backend/firebase-backend/Tools/UnitySync/src/UnitySync.js",
		"/C/TestBundles/01-10-2020-Calm2_Double_DecoCity_QUEST.json",
		"/T/Game/code/Engine/SaveData.cpp",
		"/T/Game/code/Engine/Json.h",
		"/T/Game/build/Windows/RyanOutput.json",
		"/T/Game/code/Game/Game.cpp",
		"/t/game/code/engine/generated.h",
		"/T/Game/code/Game/Game.h",
		"/T/Game/code/Engine/Json.cpp",
		"/T/Game/code/Engine/Array.cpp",
		"/C/Tripp/backend/firebase-backend/Tools/audiosync_psvr_stag.bat",
		"/E/tripp-client-audio - ps4/Assets/Editor/ResourceManagement/ExpressionStringBuilder.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Core/Account/ServerMedia.cs",
		"/E/tripp-client-audio - ps4/Assets/TeachingDefinitions/C2T_NavigatingTheHolidaysWithFamilyChallenge.txt",
		"/E/tripp-client-audio - ps4/Assets/TeachingDefinitions/C2T_LucidDreamChallenge.txt",
		"/C/Tripp/backend/firebase-backend/Tools/audiosync_psvr_dev.bat",
		"/E/tripp-client - android/Assets/Scripts/UI/MainMenu/MainMenuExperienceCircle.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Engine/AssetManagement/ExperienceExpressionNetworking.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Engine/AssetManagement/TeachingVOExpression.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Engine/AssetManagement/ExperienceExpression.cs",
		"/E/tripp-client - android/Assets/Scripts/UI/TrippComposer/TrippComposerContentManager.cs",
		"/E/tripp-client-audio - ps4/Assets/TeachingDefinitions/C2T_LiftingOutSlump.txt",
		"/E/tripp-client-audio - ps4/TeachingExpressionStrings/C2T_Abundance.json",
		"/C/Tripp/backend/firebase-backend/Tools/UnitySync/README.md",
		"/C/Tripp/backend/firebase-backend/Tools/UnitySync/src/loadYaml.js",
		"/t/game/code/engine/renderer/shaderloader.cpp",
		"/T/Game/code/preprocessor.cpp",
		"/T/Game/code/Engine/SaveData.h",
		"/T/Game/code/Engine/MemoryManager.cpp",
		"/T/Game/code/Engine/String.cpp",
		"/T/Game/code/Platform/platform_emscripten.cpp",
		"/T/Game/code/Game/SkillTree.h",
		"/T/Game/code/Engine/Generated.h",
		"/E/tripp-client - android/Assets/Journey/Art/Art/Shaders/Uber/UberLibrary.cginc",
		"/E/tripp-client - android/Assets/Journey/Art/Art/Shaders/Uber/AmberOpaque.shader",
		"/E/tripp-client - android/Assets/Journey/Scripts/ShaderSwapper.cs",
		"/E/tripp-client - android/Assets/Scripts/Util/TrippBootstrapper.cs",
		"/E/tripp-client - android/Assets/Scripts/UI/V20 MainMenu/MainMenuWelcomeController.cs",
		"/C/Users/perma/Downloads/log.txt",
		"/T/Game/code/Engine/Types.cpp",
		"/E/tripp-client - android/Assets/Journey/Scripts/LocalAvatar.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/Plugins/AethericArts/XR/General/LinkAvatarToHelper.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/Plugins/Pixelplacement/Surge/Utilities/Initialization.cs",
		"/E/tripp-client - android/Assets/Scripts/UI/MainMenu/ThirdPartyLauncher.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Core/Networking/TrippNetworkManager.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Core/Analytics/AnalyticsManager.cs",
		"/T/Game/code/Engine/LinkedList.cpp",
		"/T/Game/code/Game/Asteroid.cpp",
		"/T/Game/code/Game/Ship.h",
		"/T/Game/code/Game/Ship.cpp",
		"/T/Game/code/Game/SkillTree.cpp",
		"/T/Game/build/Windows/SaveGame.sus",
		"/C/Users/perma/Desktop/notes.txt",
		"/C/Users/perma/Desktop/log.txt",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Core/Util/GlobalTuning.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/TriggerAndTimerHelper.cs",
		"/E/tripp-client - android/Assets/3rdParty/Scripts/Journey/JourneyTrippManager.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/Scripts/Playback/TimedEventManager.cs",
		"/E/tripp-client - android/Assets/Scripts/Design/ShaderFader.cs",
		"/E/tripp-client-audio - ps4/Assets/TeachingDefinitions/C2T_TransformingHabitsChallenge.txt",
		"/E/tripp-client-audio - ps4/Assets/TeachingDefinitions/C2T_MindfulnessChallenges.txt",
		"/E/tripp-client - android/Assets/Journey/Scripts/ScoreHelper.cs",
		"/E/tripp-client - android/Assets/Scripts/Playback/MeditationTimedEventManager.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/Scripts/Playback/MeditationTimedEventManager.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/CameraContainerController.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/SetAsActiveScene.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/Utils/TimeRiggFastForward.cs",
		"/E/tripp-client - android/Assets/3rdParty/Scripts/Journey/JourneyExperienceManager.cs",
		"/T/Game/code/Engine/imgui/imgui_demo.cpp",
		"/T/Game/code/Engine/Renderer/ogles3.cpp",
		"/T/Game/code/Engine/FixedAllocator.cpp",
		"/E/tripp-client - android/Assets/Scripts/Input/PlayerInput.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Engine/XR/XRUIInputModuleKeepEnabled.cs",
		"/E/tripp-client - android/Library/PackageCache/com.unity.xr.interaction.toolkit@2.1.1/Runtime/UI/XRUIInputModule.cs",
		"/T/Game/code/Engine/Math.cpp",
		"/T/Game/code/Game/Asteroid.h",
		"/t/game/code/engine/linkedlist.h",
		"/E/tripp-client - android/Assets/Scripts/UI/InExperience/TrippPauseMenu.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Engine/Engine/ExperienceController.cs",
		"/E/tripp-client - android/Assets/_SerenityGarden/Scripts/SerenityGarden/UI/SanctumPauseMenu.cs",
		"/E/tripp-client - android/Assets/3rdParty/Scripts/JourneyLauncher.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Engine/Engine/PlayerController.cs",
		"/E/tripp-client - android/Assets/Art/ARTISTS/Dmitri/Drift/_Scripts/Runtime/Core/DriftExperienceManager.cs",
		"/E/tripp-client - android/Library/PackageCache/com.unity.xr.interaction.toolkit@2.1.1/Runtime/Interaction/Controllers/ActionBasedController.cs",
		"/E/tripp-client - android/Assets/Scripts/HandenessManager.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/Plugins/MMFeedbacks/MMTools/Tools/MMSingletons/MMPersistentSingleton.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/Plugins/MMFeedbacks/MMTools/Tools/MMSingletons/MMPersistentHumbleSingleton.cs",
		"/E/tripp-client - android/Assets/Journey/Scripts/Plugins/AethericArts/XR/General/XRHelper.cs",
		"/E/tripp-client - android/Assets/Scripts/Input/ControllerEnabler.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Engine/XR/XritControllerManager.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Engine/Engine/BackgroundController.cs",
		"/T/Game/code/Game/Item.cpp",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Core/Account/AccountManager.cs",
		"/E/tripp-client - android/Assets/Editor/AutoBuilder.cs",
		"/E/tripp-client - android/Library/PackageCache/com.unity.xr.core-utils@2.0.0/Runtime/XROrigin.cs",
		"/E/tripp-client - android/Assets/Scripts/TRIPP/Engine/XR/DeviceDetection.cs",
		"/E/tripp-client - android/Library/PackageCache/com.unity.render-pipelines.core@12.1.6/Runtime/Debugging/DebugUpdater.cs",
		"/E/tripp-client - android/Assets/Scripts/HandleVREvents.cs",
		"/E/tripp-client - android/Assets/_SerenityGarden/Scripts/ExperienceController.cs",
		"/T/Game/code/Game/Definitions.cpp",
		"/t/game/code/game/recipe.cpp",
		"/t/game/code/game/recipe.h",
		"/T/Game/code/Game/Station.cpp",
		"/T/Game/code/Game/Station.h",
		"/E/tripp-client - android/Assets/Scripts/UI/V20 MainMenu/Featured/MainMenuFeatured.cs",
		"/E/tripp-client - android/Assets/3rdParty/Scripts/CrystalBowlsLauncher.cs"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"T:\\Game\\code",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"T:\\Game",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\3rdParty",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\3rdParty",
			"T:\\Game\\code",
			"T:/Game",
			"T:/Gmae",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"T:/code",
			"C:\\Tripp\\tripp-client - art-repo\\tripp-client-art\\tripp-client-source",
			"T:/code",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"T:/code",
			"C:\\Tripp\\tripp-client - windows\\Assets\\3rdParty\\CosmicFlow",
			"T:/code",
			"T:/",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\3rdParty\\Visitations",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\3rdParty\\CosmicFlow",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"C:\\Users\\perma\\Desktop\\UnityNpToolkit2_Source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Users\\perma\\Downloads\\PlayStationVRExample_ 2019_3",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\AssetStore",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"C:\\Users\\perma\\Desktop\\UnityNpToolkit2_Source",
			"T:\\code",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Editor",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"C:\\Users\\perma\\Desktop\\UnityNpToolkit2_Source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"C:\\Users\\perma\\Desktop\\UnityNpToolkit2_Source",
			"T:/code",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"T:\\code",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"C:\\Digital Archive\\Game Development",
			"T:/code",
			"T:",
			"C:\\Users\\perma\\Desktop\\SimplePSVR54\\testproj\\New Unity Project",
			"C:\\Users\\perma\\Desktop\\UnityNpToolkit2_Source",
			"T:/code",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"T:/code",
			"T:",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"T:/code",
			"T:/",
			"C:\\Users\\perma\\Downloads\\SimplePSVR54",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Editor",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Tripp\\tripp-client - art-repo\\tripp-client-art\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - art-repo\\tripp-client-art\\Assets\\Editor",
			"",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"T:\\",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts,C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\tripp-client-source",
			"C:\\Tripp\\tripp-client - ps4\\tripp-client - ps4\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - android\\Assets\\",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - art-repo\\tripp-client-art\\Assets\\Prefabs",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\tripp-client-source",
			"C:\\Tripp\\tripp-client - windows\\Assets\\Editor,C:\\Tripp\\tripp-client - windows\\Assets\\AssetStore",
			"C:\\Tripp\\tripp-client - windows\\Assets\\Prefabs,C:\\Tripp\\tripp-client - windows\\Assets\\Resources",
			"C:\\Tripp\\tripp-client - windows\\Assets\\Resources",
			"C:\\Tripp\\tripp-client - art-repo\\tripp-client-art\\Scripts",
			"C:\\Tripp\\tripp-client - art-repo\\tripp-client-art\\Assets",
			"T:/code",
			"T:",
			"C:\\Tripp\\tripp-client - android\\tripp-client-source",
			"C:\\Digital Archive\\BrickHeroes\\DataMine",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts",
			"C:\\Users\\perma\\Desktop\\llhu\\english\\heroes",
			"C:\\Tripp\\tripp-client - android\\tripp-client-source,C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\Assets\\Editor",
			"C:\\Tripp\\tripp-client - android\\tripp-client-source,C:\\Tripp\\tripp-client - android\\Assets\\Scripts",
			"T:\\code",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\tripp-client-source,C:\\Tripp\\tripp-client - android\\Assets\\3rdParty\\Lumen",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\tripp-client-source",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\tripp-client-source,C:\\Tripp\\tripp-client - android\\Assets\\Prefabs,C:\\Tripp\\tripp-client - android\\Assets\\Scenes",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\tripp-client-source,C:\\Tripp\\tripp-client - android\\Assets\\Prefabs,C:\\Tripp\\tripp-client - android\\Assets\\Scenes,C:\\Tripp\\tripp-client - android\\Assets\\Resources",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\tripp-client-source,C:\\Tripp\\tripp-client - android\\Assets\\Prefabs,C:\\Tripp\\tripp-client - android\\Assets\\Scenes",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\tripp-client-source,C:\\Tripp\\tripp-client - android\\Assets\\Prefabs",
			"C:\\Tripp\\tripp-client - android",
			"C:\\Tripp\\tripp-client - android\\Assets\\3rdParty\\Lumen\\Scripts,C:\\Tripp\\tripp-client - android\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - android\\Assets\\3rdParty\\Lumen\\Scripts",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\Assets\\Editor,C:\\Tripp\\tripp-client - android\\tripp-client-source,C:\\Tripp\\tripp-client - android\\Assets\\3rdParty\\Lumen,C:\\Tripp\\tripp-client - android\\Assets\\3rdParty\\Lumen\\Scripts",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\Assets\\Editor,C:\\Tripp\\tripp-client - android\\tripp-client-source,C:\\Tripp\\tripp-client - android\\Assets\\3rdParty\\Lumen",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\Assets\\Editor,C:\\Tripp\\tripp-client - android\\tripp-client-source",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - android",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts,C:\\Tripp\\tripp-client - android\\tripp-client-source",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - android\\Assets",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts\\,C:\\Tripp\\tripp-client - android\\Assets\\Editor,C:\\Tripp\\tripp-client - android\\tripp-client-source",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts\\,C:\\Tripp\\tripp-client - android\\Assets\\Oculus",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - android\\Packages",
			"C:\\Tripp\\tripp-client - android\\",
			"C:\\Tripp\\tripp-client - android\\Assets\\",
			"C:\\Tripp\\tripp-client - android\\Assets\\Scripts",
			"C:\\Tripp\\tripp-client - android",
			"C:\\Tripp\\tripp-client\\Assets",
			"C:\\Tripp\\tripp-client\\Assets\\",
			"C:\\Tripp\\tripp-client\\Assets\\Scripts,C:\\Tripp\\tripp-client\\tripp-client-source,C:\\Tripp\\tripp-client\\Assets\\Editor",
			"C:\\Tripp\\tripp-client\\Assets\\Scripts,C:\\Tripp\\tripp-client\\tripp-client-source",
			"C:\\Tripp\\tripp-client\\Assets",
			"C:\\Tripp\\tripp-client\\Assets\\Scripts,C:\\Tripp\\tripp-client\\tripp-client-source",
			"C:\\Tripp\\tripp-client\\Assets\\Scripts,C:\\Tripp\\tripp-client\\tripp-client-source;,C:\\Tripp\\tripp-client\\Assets\\Editor",
			"C:\\Tripp\\tripp-client\\Assets\\Scripts,C:\\Tripp\\tripp-client\\tripp-client-source;C:\\Tripp\\tripp-client\\Assets\\Editor",
			"C:\\Tripp\\tripp-client\\Assets,C:\\Tripp\\tripp-client\\tripp-client-source",
			"C:\\Tripp\\tripp-client\\Assets\\Scripts,C:\\Tripp\\tripp-client\\tripp-client-source",
			"C:\\Tripp\\tripp-client\\Assets,C:\\Tripp\\tripp-client\\tripp-client-source",
			"C:\\Tripp\\tripp-client\\Assets\\Scripts,C:\\Tripp\\tripp-client\\tripp-client-source",
			"F:\\Tripp\\tripp-client\\Assets\\Scripts,F:\\Tripp\\tripp-client\\tripp-client-source,F:\\Tripp\\tripp-client\\Assets\\Editor"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"font_style",
			"Consume",
			"consume",
			"consumer",
			"AddChild",
			"thread_work",
			"window",
			"image",
			"teachingsdir",
			"LoadJsonData",
			"Pair",
			"enum class token_type",
			"token_type",
			"token_type::open_curly",
			"Child",
			"Array",
			"array",
			"assetBundlesPath",
			"platform",
			"buildtype",
			"response",
			"UpdateTeachingEntriesForType",
			"teaching",
			"ExperienceImageSize",
			"servermedia",
			"sizes",
			"ExperienceImageSize",
			"calm2Teachings",
			"GetTeachingsForType",
			"TeahcingVOExpressionEntry",
			"ExperienceImageSize",
			"TeahcingVOExpressionEntry",
			"ExperienceExpressionString",
			"experiencefields",
			"pendingImageDownloadIds",
			"GetUrlForClosestSize",
			"experiencemenuinfo",
			"FillAndCacheImageWhenLoaded",
			"teaching",
			"TeahcingVOExpressionEntry",
			"teachingImageDirectory",
			"teachingexpressionthumbnails",
			"teachingImageDirectory",
			"image",
			"createorupdateexperiences",
			"graphqlRequest",
			"imageid",
			"imagesByName",
			"imagesBucket",
			"uploadExperienceImages",
			"graphqlRequest",
			"uploadexperienceimages",
			"logInputsInfo",
			"image",
			"TryCopyThumbnail",
			"experiencesBuilt",
			"BuildTeachingExpressionStrings",
			"experienceImageDirectory",
			"teachingImageDirectory",
			"teaching",
			"image",
			"teachinginput",
			"syncexperiences",
			"uploadExperienceImages",
			"imagesbucket",
			"syncVersionedAssetBundles",
			"teachingsDir",
			"sync",
			"uploadExperienceImages",
			"filenames",
			"imagesBucket",
			"Token_SemiColon",
			"MoveUntil",
			"semicolon",
			"MoveUntil",
			"vector",
			"until",
			"Skipping",
			"metastruct",
			"token_metastruct",
			"primitivetypes",
			"PrimitiveTypes",
			"primitivetye",
			"PrimitiveTypes",
			"ispointer",
			"pointer",
			"ispointer",
			"Skill",
			"FillStruct",
			"shim",
			"GetInt32",
			"length",
			"lengh",
			"GetPair",
			"SaveToFile",
			"readfile",
			"writefile",
			"write",
			"meta_member",
			"tostringfunc",
			"updatevisual",
			"_initialVertexOffset",
			"_vertexOffset",
			"UpdateVisuals",
			"worldspacescale",
			"MetaInfo",
			"struct_string_return",
			"StructMemberToString",
			"analyticsVersion",
			"BQAnalytics",
			"ZoomTarget",
			"orthozoom",
			"ZoomTarget",
			"zoomtarget",
			"gamecamera",
			"Zoom",
			"ZoomTarget",
			"universe",
			"unlocked",
			"SkillTree",
			"skilltree",
			"currentstep = ",
			"runLengthDefinition",
			"_onFadeInComplete",
			"_rippleTimeMode",
			"rippletimemodd",
			"createmovementstep",
			"journey_step_type::movement"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"FuelRateMassPerSecond",
			"Three.Y",
			"Zero.Y",
			"One.Y",
			"Two.Y",
			"Three.Y",
			"Two.X",
			"One.X",
			"Zero.X",
			"",
			"FontStyleH3",
			"Globals->FontStyleP",
			"Globals->Input",
			"Camera.main.transform",
			"Camera.main",
			"4k",
			"2k",
			"",
			"RyanTesting",
			"",
			"</b>",
			"<b>",
			"",
			"</b>",
			"<b>",
			"",
			"ConnectionStatus",
			"StepsInDay",
			"GameRenderer",
			"LocalTakenGrids",
			"GetBoolParameter",
			"null;",
			"newObj",
			"Watchtower",
			"Log",
			"Tree",
			"Pyramid",
			"Grassland",
			"Foundation",
			"TN_Watchtower",
			"TN_Log",
			"TN_Tree",
			"TN_Pyramid",
			"TN_Grassland",
			"TN_Foundation",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Game/code/Engine/SaveData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7194,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 271.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Game/code/Engine/SaveData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 372,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Game/code/Engine/EngineCore.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13914,
						"regions":
						{
						},
						"selection":
						[
							[
								10597,
								10597
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6900.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Game/code/Game/Game.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9322,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Game/code/Game/Game.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35281,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Game/code/Game/Item.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5610,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Game/code/Engine/EngineCore.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36452,
						"regions":
						{
						},
						"selection":
						[
							[
								35366,
								35366
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 14104.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/UnityNVIMTransfer.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 129,
						"regions":
						{
						},
						"selection":
						[
							[
								129,
								129
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Digital Archive/ComputerEnhanceHW/calc_haversine/test_haversines/haversines_20k.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2115455,
						"regions":
						{
						},
						"selection":
						[
							[
								2115214,
								2115214
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 299685.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/C/Digital Archive/ComputerEnhanceHW/calc_haversine/test_haversines/haversines_one.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 153,
						"regions":
						{
						},
						"selection":
						[
							[
								153,
								153
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/Digital Archive/ComputerEnhanceHW/calc_haversine/build/haversines_one.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 152,
						"regions":
						{
						},
						"selection":
						[
							[
								152,
								152
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/C/Users/perma/AppData/Local/nvim/testfile.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35,
						"regions":
						{
						},
						"selection":
						[
							[
								35,
								35
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "Game/code/Engine/LinkedList.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18212,
						"regions":
						{
						},
						"selection":
						[
							[
								3044,
								3044
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 797.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "Game/code/Engine/MemoryManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1344,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 322.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 98.0
	},
	"pinned_build_system": "Packages/User/TowerEngine_game_win32.sublime-build",
	"project": "SublimeProj.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"engin",
				"Game\\code\\Engine\\enginecore.cpp"
			],
			[
				"enginecore",
				"T:\\Game\\code\\Engine\\EngineCore.cpp"
			],
			[
				"engineco",
				"Game\\code\\Engine\\EngineCore.h"
			],
			[
				"engineo",
				"Game\\code\\Engine\\enginecore.cpp"
			],
			[
				"eng",
				"Game\\code\\Engine\\EngineCore.cpp"
			],
			[
				"item",
				"Game\\code\\Game\\Item.h"
			],
			[
				"game",
				"Game\\code\\Game\\Game.cpp"
			],
			[
				"game.h",
				"Game\\code\\Game\\Game.h"
			],
			[
				"enign",
				"Game\\code\\Engine\\EngineCore.h"
			],
			[
				"win",
				"Game\\code\\Platform\\platform_win32.cpp"
			],
			[
				"save",
				"Game\\code\\Engine\\SaveData.cpp"
			],
			[
				"mem",
				"Game\\code\\Engine\\MemoryManager.cpp"
			],
			[
				"linke",
				"Game\\code\\Engine\\LinkedList.cpp"
			],
			[
				"engine",
				"Game\\code\\Engine\\EngineCore.cpp"
			],
			[
				"rya",
				"Game\\code\\Engine\\Array.cpp"
			],
			[
				"en",
				"Game\\code\\Engine\\EngineCore.cpp"
			],
			[
				"json",
				"Game\\code\\Engine\\Json.cpp"
			],
			[
				"unity",
				"C:\\Tripp\\backend\\firebase-backend\\Tools\\UnitySync\\src\\UnitySync.js"
			],
			[
				"sync",
				"C:\\Tripp\\backend\\firebase-backend\\Tools\\UnitySync\\src\\UnitySync.js"
			],
			[
				"run",
				"C:\\Tripp\\backend\\firebase-backend\\Tools\\UnitySync\\run.js"
			],
			[
				"ryan",
				"T:\\Game\\build\\Windows\\RyanOutput.json"
			],
			[
				"pre",
				"Game\\code\\preprocessor.cpp"
			],
			[
				"gen",
				"Game\\code\\Engine\\Generated.h"
			],
			[
				"prep",
				"Game\\code\\preprocessor.cpp"
			],
			[
				"skil",
				"Game\\code\\Game\\SkillTree.h"
			],
			[
				"",
				"Game\\code\\Game\\Game.cpp"
			],
			[
				"j",
				"Game\\code\\Engine\\Json.h"
			],
			[
				"string",
				"Game\\code\\Engine\\String.cpp"
			],
			[
				"svae",
				"Game\\code\\Engine\\SaveData.cpp"
			],
			[
				"ems",
				"Game\\code\\Platform\\platform_emscripten.cpp"
			],
			[
				"plat",
				"Game\\code\\Platform\\platform_win32.cpp"
			],
			[
				"types",
				"Game\\code\\Engine\\Types.cpp"
			],
			[
				"ship",
				"Game\\code\\Game\\Ship.cpp"
			],
			[
				"journeytrip",
				"E:\\tripp-client - android\\Assets\\Journey\\Scripts\\TriggerAndTimerHelper.cs"
			],
			[
				"shi",
				"Game\\code\\Game\\Ship.cpp"
			],
			[
				"aster",
				"Game\\code\\Game\\Asteroid.cpp"
			],
			[
				"demo",
				"Game\\code\\Engine\\imgui\\imgui_demo.cpp"
			],
			[
				"asteroid",
				"Game\\code\\Game\\Asteroid.cpp"
			],
			[
				"linked",
				"Game\\code\\Engine\\LinkedList.cpp"
			],
			[
				"journ",
				"E:\\tripp-client - android\\Assets\\3rdParty\\Scripts\\Journey\\JourneyExperienceManager.cs"
			],
			[
				"pause",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\InExperience\\TrippPauseMenu.cs"
			],
			[
				"link",
				"Game\\code\\Engine\\LinkedList.h"
			],
			[
				"gmae",
				"Game\\code\\Game\\Game.h"
			],
			[
				"math",
				"Game\\code\\Engine\\Math.cpp"
			],
			[
				"fixed",
				"Game\\code\\Engine\\FixedAllocator.cpp"
			],
			[
				"fixe",
				"Game\\code\\Engine\\FixedAllocator.cpp"
			],
			[
				"enigne",
				"Game\\code\\Engine\\EngineCore.cpp"
			],
			[
				"gam",
				"Game\\code\\Game\\Game.cpp"
			],
			[
				"asteroi",
				"Game\\code\\Game\\Asteroid.cpp"
			],
			[
				"ogl",
				"Game\\code\\Engine\\Renderer\\ogles3.cpp"
			],
			[
				"third",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\ThirdPartyLauncher.cs"
			],
			[
				"detail",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\TrippDetailsPanel.cs"
			],
			[
				"feature",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\V20 MainMenu\\Featured\\MainMenuFeatured.cs"
			],
			[
				"asset",
				"Game\\code\\Game\\AssetList.cpp"
			],
			[
				"def",
				"Game\\code\\Game\\Definitions.cpp"
			],
			[
				"station",
				"Game\\code\\Game\\Station.cpp"
			],
			[
				"em",
				"Game\\code\\Platform\\platform_emscripten.cpp"
			],
			[
				"rec",
				"Game\\code\\Game\\Recipe.cpp"
			],
			[
				"recip",
				"Game\\code\\Game\\Recipe.cpp"
			],
			[
				"rcip",
				"Game\\code\\Game\\Recipe.cpp"
			],
			[
				"stat",
				"Game\\code\\Game\\Station.cpp"
			],
			[
				"order",
				"Game\\code\\Game\\Order.h"
			],
			[
				"or",
				"Game\\code\\Game\\Order.h"
			],
			[
				"teyp",
				"Game\\code\\Engine\\imgui\\imstb_truetype.h"
			],
			[
				"imgui",
				"Game\\code\\Engine\\imgui\\imgui.h"
			],
			[
				"de",
				"Game\\code\\Game\\Definitions.cpp"
			],
			[
				"ore",
				"Game\\code\\Game\\Order.h"
			],
			[
				"time",
				"Game\\code\\Engine\\Timer.cpp"
			],
			[
				"itme",
				"Game\\code\\Game\\Item.cpp"
			],
			[
				"g",
				"Game\\code\\Game\\Game.h"
			],
			[
				"shh",
				"Game\\code\\Game\\Ship.h"
			],
			[
				"composerp",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\ComposerPage.cs"
			],
			[
				"debu",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\MainMenuDebugTrippsPanel.cs"
			],
			[
				"exper",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\ExperienceButton.cs"
			],
			[
				"debug",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\MainMenuDebugTrippsPanel.cs"
			],
			[
				"composer",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\TrippComposer\\TrippComposerContentManager.cs"
			],
			[
				"debugtr",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\MainMenuDebugTrippsPanel.cs"
			],
			[
				"debugtrip",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\MainMenuDebugTrippsPanel.cs"
			],
			[
				"featured",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\V20 MainMenu\\Featured\\MainMenuFeatured.cs"
			],
			[
				"featture",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\V20 MainMenu\\Featured\\MainMenuFeatured.cs"
			],
			[
				"hip",
				"Game\\code\\Game\\Ship.h"
			],
			[
				"asse",
				"Game\\code\\Game\\AssetList.cpp"
			],
			[
				"itetm",
				"Game\\build_scripts\\sign_android TEMPLATE.bat"
			],
			[
				"ass",
				"Game\\code\\Game\\AssetList.cpp"
			],
			[
				"assett",
				"Game\\code\\Game\\AssetList.h"
			],
			[
				"d",
				"Game\\code\\Game\\Definitions.cpp"
			],
			[
				"imgui.cpp",
				"Game\\code\\Engine\\imgui\\imgui.cpp"
			],
			[
				"as",
				"Game\\code\\Game\\AssetList.cpp"
			],
			[
				"andr",
				"Game\\code\\Platform\\platform_android.cpp"
			],
			[
				"build",
				"Game\\build_scripts\\build_emscripten.bat"
			],
			[
				"androi",
				"Game\\code\\Platform\\platform_android.cpp"
			],
			[
				"emsc",
				"Game\\code\\Platform\\platform_emscripten.cpp"
			],
			[
				"android",
				"Game\\code\\Platform\\platform_android.cpp"
			],
			[
				"w",
				"Game\\code\\Platform\\platform_win32.cpp"
			],
			[
				"gener",
				"Game\\code\\Engine\\Generated.h"
			],
			[
				"emscr",
				"Game\\build_scripts\\build_emscripten.bat"
			],
			[
				"egine",
				"Game\\code\\Engine\\EngineCore.cpp"
			],
			[
				"profiler",
				"Game\\code\\Engine\\Profiler.cpp"
			],
			[
				"wi",
				"Game\\code\\Platform\\platform_win32.cpp"
			],
			[
				"logging",
				"Game\\code\\Engine\\Logging.cpp"
			],
			[
				"log",
				"Game\\build\\Windows\\log.txt"
			],
			[
				"buidl",
				"Game\\build_scripts\\build_emscripten.bat"
			],
			[
				"cmake",
				"Game\\CMakeLists.txt"
			],
			[
				"buid",
				"Game\\build_scripts\\build_win32.bat"
			],
			[
				"ogles",
				"Game\\code\\Platform\\render_win32_ogles3.cpp"
			],
			[
				"pla",
				"Game\\code\\Platform\\platform_win32.cpp"
			],
			[
				"gloal",
				"E:\\tripp-client - android\\Assets\\Scripts\\TRIPP\\Core\\Util\\GlobalTuning.cs"
			],
			[
				"global",
				"E:\\tripp-client - android\\Assets\\Scripts\\TRIPP\\Core\\Util\\GlobalTuning.cs"
			],
			[
				"uip",
				"Game\\code\\Engine\\ui\\UiPanel.cpp"
			],
			[
				"mapper",
				"Game\\code\\Engine\\mapper\\mapper.cpp"
			],
			[
				"main",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\MainMenuController.cs"
			],
			[
				"mission",
				"Game\\code\\Game\\Missions.cpp"
			],
			[
				"colli",
				"Game\\code\\Engine\\Collision.cpp"
			],
			[
				"collisin",
				"Game\\code\\Engine\\Collision.cpp"
			],
			[
				"editor",
				"Game\\code\\Engine\\Editor.cpp"
			],
			[
				"misison",
				"Game\\code\\Game\\Missions.cpp"
			],
			[
				"missions",
				"Game\\code\\Game\\Missions.cpp"
			],
			[
				"mainmen",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\MainMenuController.cs"
			],
			[
				"invento",
				"E:\\tripp-client - android\\Assets\\_SerenityGarden\\Scripts\\InventoryController.cs"
			],
			[
				"analy",
				"E:\\tripp-client - android\\Assets\\Scripts\\TRIPP\\Core\\Analytics\\Analytics.cs"
			],
			[
				"miss",
				"Game\\code\\Game\\Missions.cpp"
			],
			[
				"miossion",
				"Game\\assets\\Missions\\fifth_mission.missiondefinition"
			],
			[
				"misisons",
				"Game\\code\\Game\\Missions.cpp"
			],
			[
				"camera",
				"Game\\code\\Engine\\camera\\camera.cpp"
			],
			[
				"amer",
				"Game\\code\\Engine\\camera\\camera.cpp"
			],
			[
				"gizmo",
				"Game\\code\\Engine\\gizmos.cpp"
			],
			[
				"camb",
				"C:\\Users\\perma\\Desktop\\CambriaPushNotes.txt"
			],
			[
				"gardenflow",
				"E:\\tripp-client - android\\Assets\\Scripts\\UI\\MainMenu\\GardenFlowLauncher.cs"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 74.0,
		"last_filter": "physics",
		"selected_items":
		[
			[
				"physics",
				"PhysicsAddForce"
			]
		],
		"width": 400.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 405.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
